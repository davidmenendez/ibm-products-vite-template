name: Add issue to project area given a specific label
on:
  issues:
    types: [ labeled ]

env:
  TYPESCRIPT_PROJECT_URL: https://github.com/users/matthewgallo/projects/1
  LABEL_TYPESCRIPT: 'TypeScript'
  ORGANIZATION: matthewgallo
  PROJECT_NUMBER: 1

jobs:
  track_issue:
    if: ${{ github.event.label.name == 'TypeScript' }}
    runs-on: ubuntu-latest
    steps:
    # If you are using a personal access token, replace `YOUR_TOKEN` with the name of the secret that contains your personal access token.
    #
    # Replace `YOUR_ORGANIZATION` with the name of your organization. For example, `octo-org`.
    #
    # Replace `YOUR_PROJECT_NUMBER` with your project number. To find the project number, look at the project URL. For example, `https://github.com/orgs/octo-org/projects/5` has a project number of 5.
      - name: Get project data
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          ORGANIZATION: matthewgallo
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
          query($org: String!, $number: Int!) {
            user(login: $org){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'AREA_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Area") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TYPESCRIPT_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Area") | .options[] | select(.name=="TypeScript") |.id' project_data.json) >> $GITHUB_ENV



      - name: Add issue to project
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
          ORGANIZATION: matthewgallo
          PROJECT_NUMBER: 1
        # Uses [GitHub CLI](https://cli.github.com/manual/) and the API to add the pull request that triggered this workflow to the project. The `jq` flag parses the response to get the ID of the created item.
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"

            echo 'ITEM_ID='$item_id >> $GITHUB_ENV

  # add-to-project:
  #   name: Add issue with typescript label to project
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/add-to-project@2e5cc851ca7162e9eb510e6da6a5c64022e606a7 #v1.0.0
  #       with:
  #         labeled: ${{ env.LABEL_TYPESCRIPT }}
  #         project-url: ${{ env.TYPESCRIPT_PROJECT_URL }}
  #         github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}