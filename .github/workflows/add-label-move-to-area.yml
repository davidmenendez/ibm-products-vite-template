name: Add issue to project area given a specific label
on:
  issues:
    types: [ labeled ]

# env:
  # PROJECT_URL: https://github.com/orgs/carbon-design-system/projects/65
  # ORGANIZATION: carbon-design-system
  # PROJECT_NUMBER: 65

jobs:
  move_ts_issue_to_area:
    if: ${{ github.event.label.name == 'TypeScript' }}
    runs-on: ubuntu-latest
    env:
      LABEL: "TypeScript"
      FIELD: "Area"
      FIELD_OPTION: "ðŸŸ¦ Typescript"
    steps:
      - name: Get project data
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          USER: matthewgallo
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
          query($user: String!, $number: Int!) {
            user(login: $user){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f user=$USER -F number=$PROJECT_NUMBER > project_data.json

          echo 'Field option is: $FIELD_OPTION'
          echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'AREA_FIELD_ID='$(jq --arg field $FIELD '.data.user.projectV2.fields.nodes[] | select(.name==$field) | .id' project_data.json) >> $GITHUB_ENV
          echo 'TYPESCRIPT_OPTION_ID='$(jq --arg field $FIELD --arg field_option $FIELD_OPTION '.data.user.projectV2.fields.nodes[] | select(.name==$field) | .options[] | select(.name==$field_option) |.id' project_data.json) >> $GITHUB_ENV
            

      - name: Add issue to project
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
          USER: matthewgallo
          PROJECT_NUMBER: 1
        # Uses [GitHub CLI](https://cli.github.com/manual/) and the API to add the pull request that triggered this workflow to the project. The `jq` flag parses the response to get the ID of the created item.
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"

            echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Set fields
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
        # Sets the value of the `Area` field to `TypeScript`.
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $area_field: ID!
              $area_value: String!
            ) {
              set_area: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $area_field
                value: {
                  singleSelectOptionId: $area_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f area_field=$AREA_FIELD_ID -f area_value=${{ env.TYPESCRIPT_OPTION_ID }} --silent
